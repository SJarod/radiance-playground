#version 460

#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_ray_query : enable
#extension GL_EXT_ray_tracing_position_fetch : enable

#define M_PI 3.1415926535897932384626433832795

layout(set = 0, binding = 5) uniform accelerationStructureEXT topLevelAS;

struct probe
{
	vec3 position;
};

struct cascade_desc
{
    // number of probes p
    int p;
    // number of discrete values per probes q
    int q;

    // interval length
    float dw;
};

layout (std140, binding = 1) uniform parameters {
    int maxCascadeCount;
    int maxProbeCount;
    int minDiscreteValueCount;
    float minRadianceintervalLength;
    float lightIntensity;
    int maxRayIterationCount;
} paramsubo;

// cascade desc buffer
layout (std430, binding = 2) readonly buffer CascadeDescUBO {
    cascade_desc[] descs;
} cdubo;

// cascade probes position buffer
layout (std430, binding = 3) readonly buffer CascadeUBO {
    probe[] positions;
} cubo;

// radiance interval storage buffer
layout (std140, binding = 4) buffer RadianceIntervalUBO {
    vec4[] intervals;
} riubo;

struct PointLight
{
	vec3 diffuseColor;
	float diffusePower;
	vec3 specularColor;
	float specularPower;
	vec3 position;
	float pad0[1];
	vec3 attenuation;
	float pad1[1];
};

layout(std430, set = 0, binding = 6) readonly buffer PointLightsData
{
	int pointLightCount;
	PointLight pointLights[];
};

struct DirectionalLight
{
	vec3 diffuseColor;
	float diffusePower;
	vec3 specularColor;
	float specularPower;
	vec3 direction;
	float pad0[1];
};

layout(std430, set = 0, binding = 7) readonly buffer DirectionalLightsData
{
	int directionalLightCount;
	DirectionalLight directionalLights[];
};

layout(push_constant, std430) uniform pc
{
    vec3 viewPos;
};

struct LightingResult
{
	vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

void applySinglePointLight(inout LightingResult fragLighting, in PointLight pointLight, in vec3 p, in vec3 normal)
{
	const vec3 fragPosToLightPos = pointLight.position - p;
	const float lightDist = length(fragPosToLightPos);
	const vec3 lightDir = fragPosToLightPos / lightDist;

	// Ray Query for shadow
	vec3  origin    = p;
	vec3  direction = lightDir;  // vector to light
	float tMin      = 0.01f;
	float tMax      = lightDist;

	// Initializes a ray query object but does not start traversal
	rayQueryEXT rayQuery;
	rayQueryInitializeEXT(rayQuery, topLevelAS, gl_RayFlagsTerminateOnFirstHitEXT, 0xFF, origin, tMin, direction, tMax);

	// Start traversal: return false if traversal is complete
	while(rayQueryProceedEXT(rayQuery))
	{
	}

	// Returns type of committed (true) intersection
	if(rayQueryGetIntersectionTypeEXT(rayQuery, true) != gl_RayQueryCommittedIntersectionNoneEXT)
	{
		return;
	}

	const vec3 lightAttenuationWeights = vec3(1.0, lightDist, lightDist * lightDist);

	// Get attenuation (c + l * d + q * d^2)
	const float diffuseAttenuation = dot(pointLight.attenuation, lightAttenuationWeights);

	float diffuseIntensity = max(dot(normal, lightDir), 0.0);
	fragLighting.diffuse += diffuseIntensity * pointLight.diffuseColor * pointLight.diffusePower / diffuseAttenuation;
	fragLighting.specular += vec3(0.0);
}

void applySingleDirectionalLight(inout LightingResult fragLighting, in DirectionalLight directionalLight, in vec3 p, in vec3 normal)
{
	vec3 lightDir = normalize(directionalLight.direction);

	// Ray Query for shadow
	vec3  origin    = p;
	vec3  direction = lightDir;  // vector to light
	float tMin      = 0.01f;
	float tMax      = 999.0f;

	// Initializes a ray query object but does not start traversal
	rayQueryEXT rayQuery;
	rayQueryInitializeEXT(rayQuery, topLevelAS, gl_RayFlagsTerminateOnFirstHitEXT, 0xFF, origin, tMin, direction, tMax);

	// Start traversal: return false if traversal is complete
	while(rayQueryProceedEXT(rayQuery))
	{
	}

	// Returns type of committed (true) intersection
	if(rayQueryGetIntersectionTypeEXT(rayQuery, true) != gl_RayQueryCommittedIntersectionNoneEXT)
	{
		return;
	}

	float diff = max(dot(normal, lightDir), 0.0);
	fragLighting.diffuse += diff * directionalLight.diffuseColor * directionalLight.diffusePower;
	fragLighting.specular += vec3(0.0);
}

// raycasting to detect incoming radiance to a point p (and detect transparency)
// R(p, w)
vec4 raycasting_function(vec3 p, vec3 dir, float len)
{
    // taken from https://www.shadertoy.com/view/mtlBzX
    int n = int(gl_WorkGroupID.x);
    float t1 = cdubo.descs[0].dw;
    float tMin = n == 0 ? 0.0 : t1 * float(1 << 2 * (n - 1));
    float tMax = t1 * float(1 << 2 * n);
    tMax = tMax - tMin;

    // Ray Query for shadow
    vec3  origin    = p;
    vec3  direction = dir;

    // Initializes a ray query object but does not start traversal
    rayQueryEXT rayQuery;
    rayQueryInitializeEXT(rayQuery, topLevelAS, gl_RayFlagsTerminateOnFirstHitEXT, 0xFF, origin, tMin, direction, tMax);
    
    // Start traversal: return false if traversal is complete
    while(rayQueryProceedEXT(rayQuery))
    {
    }

    vec4 incomingRadiance = vec4(0.0);
    // Returns type of committed (true) intersection
    if(rayQueryGetIntersectionTypeEXT(rayQuery, true) != gl_RayQueryCommittedIntersectionNoneEXT)
    {
        vec3 pos[3];
        rayQueryGetIntersectionTriangleVertexPositionsEXT(rayQuery, true, pos);
    
        vec3 normal = cross(pos[1] - pos[0], pos[2] - pos[0]);
        vec3 p = (pos[0] + pos[1] + pos[2]) / 3.0;
    
        LightingResult result;
        for (int i = 0; i < pointLightCount; i++)
        {
            applySinglePointLight(result, pointLights[i], p, normal);
        }
    
        for (int i = 0; i < directionalLightCount; i++)
        {
            applySingleDirectionalLight(result, directionalLights[i], p, normal);
        }
        incomingRadiance = vec4(result.diffuse + result.specular, 1.0);
    }
    return incomingRadiance;
}

// the cascades are managed by the dispatch (work group)
#define LOCAL_SIZE_X 128 // one thread per probe (more or less)
#define LOCAL_SIZE_Y 1
#define LOCAL_SIZE_Z 1
layout (local_size_x = LOCAL_SIZE_X, local_size_y = LOCAL_SIZE_Y, local_size_z = LOCAL_SIZE_Z) in;

void main()
{
    if (gl_WorkGroupID.x >= paramsubo.maxCascadeCount)
        return;

    // radiance gather
    int cascadeIndex = int(gl_WorkGroupID.x);
    
    vec4 result = vec4(0.0);
        
    cascade_desc desc = cdubo.descs[cascadeIndex];
    int probeCount = desc.p;
    int intervalCount = desc.q;

    float intervalLength = desc.dw;

    int probeIndexOffset = 0;
    int intervalIndexOffset = 0;
    for (int i = 0; i < cascadeIndex; ++i)
    {
        // get previous cascade (min index is 0)
        int previousCascadeIndex = max(0, i);
        cascade_desc previous_desc = cdubo.descs[previousCascadeIndex];

        probeIndexOffset += previous_desc.p;
        intervalIndexOffset += previous_desc.p * previous_desc.q;
    }

    int itCount = max(1, probeCount / LOCAL_SIZE_X);
    for (int i = 0; i < itCount; ++i)
    {
        int ii = int(gl_LocalInvocationID.x) + (LOCAL_SIZE_X * i);
        if (ii >= probeCount)
            break;

        // index of probe is offsetted by the number of probes in the previous cascade
        int probeIndex = probeIndexOffset + ii;

        float intervalOffset = 0.0;
        if (cascadeIndex > 0)
            intervalOffset = float(1 << (cascadeIndex - 1));
        intervalOffset *= float(paramsubo.minRadianceintervalLength);

        probe p;
	    p.position = cubo.positions[probeIndex].position;

        // index of interval is offsetted by the number of intervals before hand
        // the number of intervals per probes in the previous cascades
        // the strides are intervalCount length
        int intervalProbeIndex = intervalIndexOffset + ii * intervalCount;

        for (int j = 0; j < int(sqrt(intervalCount)); j++)
        {
            float phi = M_PI * float(j + 1) / float(sqrt(intervalCount));
            for (int k = 0; k < int(sqrt(intervalCount))/2; k++)
            {
                float theta = 2.0 * M_PI * float(k) / float(int(sqrt(intervalCount))/2);
                float x = sin(phi) * cos(theta);
                float y = cos(phi);
                float z = sin(phi) * sin(theta);

                vec3 dir = vec3(x, y, z);
                // radiance interval
                vec4 interval = raycasting_function(p.position + dir * intervalOffset, dir, intervalLength);

                int intervalIndex = intervalProbeIndex + k;
                riubo.intervals[intervalIndex] = interval;
            }
        }
    }
}